fieldset {
  border: $base-border;
  margin: 0 0 $small-spacing;
  padding: $base-spacing;
}

input,
label,
select {
  display: block;
  font-family: $base-font-family;
  font-size: $base-font-size;
}

label {
  font-size: $font-size-smaller;
  font-weight: 400;
  margin-bottom: 0;
  text-transform: uppercase;
  color: $dark-grey;
  line-height: 2;
  letter-spacing: .05em;

  &.required::after {
    content: "*";
  }

  abbr {
    display: none;
  }
}

#{$all-text-inputs},
select[multiple=multiple] {
  color: $body-grey;
  background-color: #fff;
  border: $base-border;
  border-radius: $base-border-radius;
  box-shadow: $form-box-shadow;
  box-sizing: border-box;
  font-family: $base-font-family;
  font-size: $base-font-size;
  line-height: 1;
  margin-bottom: $small-spacing;
  padding: .5em .75em;
  transition: border-color $base-duration $base-timing;
  width: 100%;
  height: auto; //Override BS hard-value

  &:hover {
    border-color: shade($base-border-color, 20%);
  }

  &:focus {
    border-color: $es-green;
    box-shadow: $form-box-shadow-focus;
    outline: none;
    background: #fff;
  }

  &:disabled {
    background-color: $bg-grey;
    cursor: not-allowed;

    &:hover {
      border: $base-border;
    }
  }
}

// Setting an explicit height as a quick work-around of inconsistencies with these elements
select.form-control,
input[type=date] {
  height: 37px;
}

textarea {
  resize: vertical;
}

input[type="search"] {
  appearance: none;
}

input[type="checkbox"],
input[type="radio"] {
  display: inline;
  margin-right: $small-spacing / 2;

  + label {
    display: inline-block;
  }
}

input[type="file"] {
  margin-bottom: $small-spacing;
  width: 100%;
}

// Form Classes
.form-group {
  margin-bottom: $base-spacing;
}
.checkbox,
.radio {
  label {
    text-transform: none;
    font-size: modular-scale(-1);
  }
}

// Input Group Overrides
.input-group-addon {
  background-color: $grey;
  border-color: $base-border-color;
}

// input[type=date]
/*.input-date {
  .input-group-addon {
    background-color: $es-blue;
    color: #fff;
  }
}*/


// Error States
.has-error {
  label {
    color: $red;
  }
}

.has-error .form-control {
  color: $red;
  border-color: $red;

  &:hover {
    box-shadow: none;
    border-color: $red;
  }
}

.has-error .help-block {
  color: $red;
  font-size: $font-size-smaller;
  margin-top: 0;
  padding-left: .5em;
  border-left: 2px solid $red;
/*
  &:before {
    font-family: "FontAwesome";
    content: '\f071';
    margin-right: .25em;
  }
*/
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: not-allowed;
    }
  }
}

// Inline forms (Pulled directly from Bootstrap)
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

// [converter] extracted from `.form-inline` for libsass compatibility
@mixin form-inline {

  // Kick in the inline
    // Inline-block all the things for "inline"
    .form-group,
    .btn {
      display: inline-block;
      margin-bottom: $base-spacing;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
        font-size: inherit;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
}
// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
  @include form-inline;
}


